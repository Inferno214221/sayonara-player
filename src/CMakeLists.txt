cmake_minimum_required(VERSION 3.8)
project(sayonara)

include(CheckIncludeFileCXX)

include_directories(${CMAKE_CURRENT_SOURCE_DIR})
include_directories(${CMAKE_CURRENT_BINARY_DIR})

# absolute linker paths are no longer supoorted in -l parameter
# use -L for path and -l for library itself
if(POLICY CMP0003)
	cmake_policy(SET CMP0003 NEW)
endif()

# no more escaping of preprocessor definitions
if(POLICY CMP0005)
	cmake_policy(SET CMP0005 NEW)
endif()

# Run Automoc/Autouic over autogenerated source files (e.g. from qrc files)
if(POLICY CMP0071)
	cmake_policy(SET CMP0071 NEW)
endif()

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

if( NOT DEFINED CMAKE_BUILD_TYPE OR NOT CMAKE_BUILD_TYPE )
	message("Use standard build type \"Release\"")
	set(CMAKE_BUILD_TYPE "Release")
endif()

# DBus and Shutdown
if(WIN32)
	message("Windows: host Will compile without dbus and shutdown support")
else()
	message("No Windows: Will compile with dbus and shutdown support")
	# Macros.h.in
	set(SAYONARA_WITH_DBUS 1)
	set(SAYONARA_WITH_SHUTDOWN 1)
	set(WIN32 0)
endif()

# check libexecinfo for non-glibc systems
if(NOT WIN32)
	include(CheckSymbolExists)
	message("Checking if backtrace symbol present")
	check_symbol_exists(backtrace execinfo.h backtrace_exists)
	if(NOT backtrace_exists)
		message("backtrace is missing (non-glibc platform), trying to find libexecinfo")
		find_library(execinfo_LIB execinfo)
		if(NOT execinfo_LIB)
			message(FATAL_ERROR "libexecinfo not found")
		endif()
		set(OS_LIBRARIES ${execinfo_LIB})
	else()
		set(SAYONARA_HAS_BACKTRACE 1)
	endif()
endif()

# Check demangle
check_include_file_cxx("cxxabi.h" HAVE_CXX_ABI)
if(${HAVE_CXX_ABI})
	# Macros.h.in
	set(SAYONARA_HAS_CXX_ABI 1)
	message("Compile with demangle")
else()
	message("Demangle not found")
endif()

configure_file(Macros.h.in "${CMAKE_CURRENT_BINARY_DIR}/Utils/Macros.h" @ONLY)

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC OFF)
set(CMAKE_INCLUDE_CURRENT_DIR ON)

add_subdirectory(Application)
add_subdirectory(Components)
add_subdirectory(Database)
add_subdirectory(DBus)
add_subdirectory(Interfaces)
add_subdirectory(Gui)
add_subdirectory(Languages)
add_subdirectory(Utils)

qt5_add_resources(DATABASE_RCC
	${CMAKE_CURRENT_SOURCE_DIR}/../resources/Database.qrc
	${CMAKE_CURRENT_SOURCE_DIR}/../resources/Resources.qrc
)

add_executable(${PROJECT_NAME} Main.cpp ${QM_FILES} ${DATABASE_RCC})

if(WIN32)
	set(OS_LIBRARIES
		api-ms-win-core-winrt-l1-1-0
		api-ms-win-core-winrt-string-l1-1-0
		${GIO_LIBRARIES}
	)
endif()

target_link_libraries(${PROJECT_NAME}
	sayonara_application
	sayonara_languages

	${OS_LIBRARIES}
)

add_executable("create-database" CreateDB.cpp ${DATABASE_RCC})
target_link_libraries("create-database"
	sayonara_utils
	sayonara_database
	Qt5::Widgets
)

if(WIN32)
	install(TARGETS ${PROJECT_NAME} DESTINATION .)
else()
	install(TARGETS ${PROJECT_NAME} DESTINATION bin)
endif()

if(GSTREAMER_PLUGIN_LIBRARIES)
	message("Will install gstreamer plugins")

	install(FILES ${GSTREAMER_PLUGIN_LIBRARIES} DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/gstreamer-1.0)
	install(FILES ${GSTREAMER_PLUGIN_SCANNER} DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/gstreamer1.0/gstreamer-1.0)
	install(DIRECTORY ${GLIB_SCHEMA_DIR} DESTINATION ${CMAKE_INSTALL_PREFIX}/share/glib-2.0/)
	install(FILES ${GLIB_SCHEMA} DESTINATION ${CMAKE_INSTALL_PREFIX}/share/glib-2.0/schemas/)
	install(DIRECTORY ${GIO_MODULE_DIR} DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/gio/)
	install(FILES ${GIO_QUERYMODULES} DESTINATION ${CMAKE_INSTALL_PREFIX}/bin/)
endif()
